steps:
# 1. Execute Gradle build
- name: 'alpine/java:11.0.22'
  id: 'build-gradle'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      #./gradlew clean build
      #./gradlew clean build -p direct-deal-gateway
      ./gradlew build --parallel -Dorg.gradle.jvmargs="-Xmx2g"
      ./gradlew build -p direct-deal-gateway -Dorg.gradle.jvmargs="-Xmx2g"

# 2. Docker image build and tag (each service in multiple steps)
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-account-service'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-account-service:$REVISION_ID', './direct-deal-account-service'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-sale-service'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-sale-service:$REVISION_ID', './direct-deal-sale-service'
    ]
  waitFor: ["-"]
  
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-sale-catalog-service-webflux'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-sale-catalog-service-webflux:$REVISION_ID', './direct-deal-sale-catalog-service-webflux'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-transaction-history-service'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-transaction-history-service:$REVISION_ID', './direct-deal-transaction-history-service'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-chatting-service'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-chatting-service:$REVISION_ID', './direct-deal-chatting-service'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-gateway'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-gateway:$REVISION_ID', './direct-deal-gateway'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-mysql'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-mysql:$REVISION_ID', './mysql'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-nginx'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-nginx:$REVISION_ID', './direct-deal-ui'
    ]
  
# 3. Push images to the registry
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-push-all'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-account-service:$REVISION_ID'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-sale-service:$REVISION_ID'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-sale-catalog-service-webflux:$REVISION_ID'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-transaction-history-service:$REVISION_ID'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-chatting-service:$REVISION_ID'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-gateway:$REVISION_ID'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-mysql:$REVISION_ID'
    ]
  waitFor: ["-"]

- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-nginx:$REVISION_ID'
    ]

# 4. Deploy to Kubernetes cluster by applying manifests
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    [
      'container', 'clusters', 'get-credentials',
      '$_GKE_CLUSTER',      
      '--zone', '$_DEPLOY_REGION',
      '--project', '$PROJECT_ID'
    ]

# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args:
#     - '-c'
#     - |
#       apt-get update && apt-get install -y gettext-base
#       envsubst < ./deployment/kubernetes/direct-deal-account-service.yml | kubectl apply -f -
#   env:
#      - 'CLOUDSDK_COMPUTE_ZONE=$_DEPLOY_REGION'      
#      - 'CLOUDSDK_CONTAINER_CLUSTER=$_GKE_CLUSTER' 

- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      for file in ./deployment/kubernetes/configmap/*.yml; do
        echo "Applying $file"
        kubectl apply -f $file
      done
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=$_DEPLOY_REGION'      
    - 'CLOUDSDK_CONTAINER_CLUSTER=$_GKE_CLUSTER' 

# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args:
#     - '-c'
#     - |
#       if ! kubectl get deployment $deploy -n default > /dev/null 2>&1; then
#       apt-get update && apt-get install -y gettext-base
#       for file in ./deployment/kubernetes/*.yml; do
#         echo "Applying $file"
#         envsubst < $file | kubectl apply -f -
#       done
#   env:
#     - 'CLOUDSDK_COMPUTE_ZONE=$_DEPLOY_REGION'      
#     - 'CLOUDSDK_CONTAINER_CLUSTER=$_GKE_CLUSTER' 
#     - 'PROJECT_ID=$PROJECT_ID'

- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -e
      declare -A manifests
      declare -A images

      manifests[account-service]="./deployment/kubernetes/direct-deal-account-service.yml"
      manifests[chatting-service]="./deployment/kubernetes/direct-deal-chatting-service.yml"
      manifests[gateway]="./deployment/kubernetes/direct-deal-gateway-service.yml"
      manifests[sale-catalog-service]="./deployment/kubernetes/direct-deal-sale-catalog-service.yml"
      manifests[sale-service]="./deployment/kubernetes/direct-deal-sale-service-webflux.yml"
      manifests[transaction-history-service]="./deployment/kubernetes/direct-deal-transaction-history-service.yml"
      manifests[kafka]="./deployment/kubernetes/kafka-service.yml"
      manifests[mongo]="./deployment/kubernetes/mongo-service.yml"
      manifests[mysql]="./deployment/kubernetes/mysql-service.yml"
      manifests[nginx]="./deployment/kubernetes/nginx-service.yml"
      manifests[redis]="./deployment/kubernetes/redis-service.yml"
      manifests[zookeeper]="./deployment/kubernetes/zookeeper-service.yml"

      images[account-service]="gcr.io/$PROJECT_ID/direct-deal-account-service:$REVISION_ID"
      images[chatting-service]="gcr.io/$PROJECT_ID/direct-deal-chatting-service:$REVISION_ID"
      images[gateway]="gcr.io/$PROJECT_ID/direct-deal-gateway:$REVISION_ID"
      images[sale-catalog-service]="gcr.io/$PROJECT_ID/direct-deal-sale-catalog-service:$REVISION_ID"
      images[sale-service]="gcr.io/$PROJECT_ID/direct-deal-sale-service-webflux:$REVISION_ID"
      images[transaction-history-service]="gcr.io/$PROJECT_ID/direct-deal-transaction-history-service:$REVISION_ID"
      images[kafka]="wurstmeister/kafka:2.12-2.4.0"
      images[mongo]="mongo:4.0.25"
      images[mysql]="gcr.io/$PROJECT_ID/direct-deal-mysql:$REVISION_ID"
      images[nginx]="gcr.io/$PROJECT_ID/direct-deal-nginx:$REVISION_ID"
      images[redis]="redis:6.2.4-alpine3.13"
      images[zookeeper]="wurstmeister/zookeeper"

      for deploy in "${!manifests[@]}"; do
          if ! kubectl get deployment $deploy -n default > /dev/null 2>&1; then
              echo "Creating deployment for $deploy"
              envsubst < "${manifests[$deploy]}" | kubectl apply -n default -f -
              # Wait for the deployment to be ready
              # kubectl rollout status deployment/$deploy -n default
          fi
          echo "Updating image for $deploy"
          kubectl set image deployment/$deploy $deploy=${images[$deploy]} -n default
      done
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=$_DEPLOY_REGION'      
    - 'CLOUDSDK_CONTAINER_CLUSTER=$_GKE_CLUSTER' 
    - 'PROJECT_ID=$PROJECT_ID'

timeout: '1200s'  # Maximum build timeout set to 20 minutes

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8