steps:
# 1. Execute Gradle build
- name: 'gradle:jdk11'  # Gradle 빌드용 이미지 (필요에 따라 변경 가능)
  id: 'build-gradle'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      ./gradlew clean build
      ./gradlew clean build -p direct-deal-gateway

# 2. Docker image build and tag (each service in multiple steps)
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-account-service'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-account-service', './direct-deal-account-service'
    ]
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-tag-account-service'
  args:
    [
      'tag', 'gcr.io/$PROJECT_ID/direct-deal-account-service', 'gcr.io/$PROJECT_ID/direct-deal-account-service'
    ]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-sale-service'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-sale-service', './direct-deal-sale-service'
    ]
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-tag-sale-service'
  args:
    [
      'tag', 'gcr.io/$PROJECT_ID/direct-deal-sale-service', 'gcr.io/$PROJECT_ID/direct-deal-sale-service'
    ]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-sale-catalog-service-webflux'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-sale-catalog-service-webflux', './direct-deal-sale-catalog-service-webflux'
    ]
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-tag-sale-catalog-service-webflux'
  args:
    [
      'tag', 'gcr.io/$PROJECT_ID/direct-deal-sale-catalog-service-webflux', 'gcr.io/$PROJECT_ID/direct-deal-sale-catalog-service-webflux'
    ]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-transaction-history-service'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-transaction-history-service', './direct-deal-transaction-history-service'
    ]
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-tag-transaction-history-service'
  args:
    [
      'tag', 'gcr.io/$PROJECT_ID/direct-deal-transaction-history-service', 'gcr.io/$PROJECT_ID/direct-deal-transaction-history-service'
    ]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-chatting-service'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-chatting-service', './direct-deal-chatting-service'
    ]
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-tag-chatting-service'
  args:
    [
      'tag', 'gcr.io/$PROJECT_ID/direct-deal-chatting-service', 'gcr.io/$PROJECT_ID/direct-deal-chatting-service'
    ]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-gateway'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-gateway', './direct-deal-gateway'
    ]
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-tag-gateway'
  args:
    [
      'tag', 'gcr.io/$PROJECT_ID/direct-deal-gateway', 'gcr.io/$PROJECT_ID/direct-deal-gateway'
    ]

- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-build-mysql'
  args:
    [
      'build', '-t', 'gcr.io/$PROJECT_ID/direct-deal-mysql', './mysql'
    ]
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-tag-mysql'
  args:
    [
      'tag', 'gcr.io/$PROJECT_ID/direct-deal-mysql', 'gcr.io/$PROJECT_ID/direct-deal-mysql'
    ]

# 3. Push images to the registry
- name: 'gcr.io/cloud-builders/docker'
  id: 'docker-push-all'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-account-service'
    ]
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-sale-service'
    ]
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-sale-catalog-service-webflux'
    ]
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-transaction-history-service'
    ]
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-chatting-service'
    ]
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-gateway'
    ]
- name: 'gcr.io/cloud-builders/docker'
  args:
    [
      'push', 'gcr.io/$PROJECT_ID/direct-deal-mysql'
    ]

# 4. Deploy to Kubernetes cluster by applying manifests
# - name: 'gcr.io/cloud-builders/kubectl'
#   id: 'deploy-to-gke'
#   args:
#     [
#       'apply', '-f', './deployment/kubernetes'
#     ]
#   env:
#     - 'CLOUDSDK_COMPUTE_ZONE=europe-west12'      # 원하는 GCP 리전/존으로 수정
#     - 'CLOUDSDK_CONTAINER_CLUSTER=directdeal-autopilot-cluster' # GKE 클러스터 이름으로 수정

# 4. Deploy to Kubernetes cluster by applying manifests
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      envsubst < ./deployment/kubernetes/account-service.yml | kubectl apply -f -
  env:
     - 'CLOUDSDK_COMPUTE_ZONE=europe-west12'      # 원하는 GCP 리전/존으로 수정
     - 'CLOUDSDK_CONTAINER_CLUSTER=directdeal-autopilot-cluster' # GKE 클러스터 이름으로 수정

# 4. Deploy to Kubernetes cluster by applying manifests (all at once)
# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args:
#     - '-c'
#     - |
#       for file in ./deployment/kubernetes/*.yml; do
#         echo "Applying $file"
#         envsubst < $file | kubectl apply -f -
#       done
#   env:

timeout: '1200s'  # Maximum build timeout set to 20 minutes

options:
  logging: CLOUD_LOGGING_ONLY